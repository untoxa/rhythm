replace restart {
 ld	hl, #%1 + %2
 dec	hl
} by {
 ; incdec peephole 1 moved decrement of hl to constant
 ld	hl, #%1 + %3
} if operandsLiteral(%2), immdInRange(0 65535 '-' %2 1 %3)

replace restart {
 ld	hl, #%1 - %2
 dec	hl
} by {
 ; incdec peephole 2 moved decrement of hl to constant
 ld	hl, #%1 - %3
} if operandsLiteral(%2), immdInRange(0 65535 '+' %2 1 %3)

replace restart {
 ld	hl, #%1 + %2
 inc	hl
} by {
 ; incdec peephole 3 moved increment of hl to constant
 ld	hl, #%1 + %3
} if operandsLiteral(%2), immdInRange(0 65535 '+' %2 1 %3)

replace restart {
 ld	hl, #%1 - %2
 inc	hl
} by {
 ; incdec peephole 4 moved increment of hl to constant
 ld	hl, #%1 - %3
} if operandsLiteral(%2), immdInRange(0 65535 '-' %2 1 %3)

replace restart {
 ld	hl, #%1
 dec	hl
} by {
 ; incdec peephole 5 moved decrement of hl to constant
 ld	hl, #%2
} if operandsLiteral(%1), immdInRange(0 65535 '-' %1 1 %2)

replace restart {
 ld	hl, #%1
 inc	hl
} by {
 ; incdec peephole 6 moved increment of hl to constant
 ld	hl, #%2
} if operandsLiteral(%1), immdInRange(0 65535 '+' %1 1 %2)

replace restart {
 ld	hl, #%1
 add	hl, %2
 ld	b, h
 ld	c, l
 inc	%2
} by {
 ; incdec peephole 7 moved increment of %2 to constant
 ld	hl, #%3
 add	hl, %2
 ld	b, h
 ld	c, l
} if operandsLiteral(%1), immdInRange(0 65535 '+' %1 1 %x3)

replace {
 sub	a, #0x01
} by {
 ; incdec peephole 8 turned sub into decrement
 dec	a
} if notUsed('cf')

replace {
 and	a, #%1
 and	a, #%2
} by {
 ; redundancy peephole 1 removed redundant and: %1 & %2
 and	a, #%3
} if operandsLiteral(%1 %2), immdInRange(0x0 0xff '&' %1 %2 %x3)

replace {
 or	a, #%1
 or	a, #%2
} by {
 ; redundancy peephole 2 removed redundant or: %1 | %2
 or	a, #%3
} if operandsLiteral(%1 %2), immdInRange(0x0 0xff '|' %1 %2 %x3)

replace {
 xor	a, #%1
 xor	a, #%2
} by {
 ; redundancy peephole 2 removed redundant xor: %1 ^ %2
 xor	a, #%3
} if operandsLiteral(%1 %2), immdInRange(0x0 0xff '^' %1 %2 %x3)

replace{
 add %4, #%1
 add %4, #%2
} by {
 ; redundancy peephole 4 removed redundant add: %1 + %2
 add %4, #%3
} if notSame('sp' %4), operandsLiteral(%1 %2), immdInRange(0 0xff '+' %1 %2 %x3)

replace{
 add sp, #%1
 add sp, #%2
} by {
 ; redundancy peephole 5 removed redundant add for sp: %1 + %2
 add sp, #%3
} if operandsLiteral(%1 %2), immdInRange(-128 127 '+' %1 %2 %x3)

// don't optimize sp without range check
replace{
 add %4, #%1
 add %4, #%2
} by {
 ; redundancy peephole 6 removed redundant add
 add %4, #%1 + %2
} if notSame('sp' %4)

replace{
 sub %4, #%1
 sub %4, #%2
} by {
 ; redundancy peephole 7 removed redundant add: %1 + %2
 sub %4, #%3
} if operandsLiteral(%1 %2), immdInRange(0 0xff '+' %1 %2 %x3)

replace{
 sub %4, #%1
 sub %4, #%2
} by {
 ; redundancy peephole 8 removed redundant add
 sub %4, #%1 + %2
}

replace restart{
 ld	%1, %2 + 0
} by {
 ; redundancy peephole 9a removed + 0
 ld	%1, %2
}

replace restart{
 ld	%1 + 0, %2
} by {
 ; redundancy peephole 9b removed + 0
 ld	%1 + 0, %2
}

replace restart{
 ld	%1, (%2 + 0)
} by {
 ; redundancy peephole 10a removed + 0
 ld	%1, (%2)
}

replace restart{
 ld	(%1 + 0), %2
} by {
 ; redundancy peephole 10b removed + 0
 ld	(%1), %2
}

replace restart{
 ld	%1, (#(%2 + %3))
} by {
 ; redundancy peephole 11a removed brackets
 ld	%1, (#%2 + %3)
}

replace restart{
 ld	(#(%1 + %3)), %2
} by {
 ; redundancy peephole 11b removed brackets
 ld	(#%1 + %3), %2
}

replace {
 ld	  %1, (hl)
 ld	  %2, #0x00
 sla  %1
 rl   %2
 sla  %1
 rl   %2
 sla  %1
 rl   %2
 sla  %1
 rl   %2
} by {
 ; 16bitarithmetic peephole 1 improved <<4
 ld   a, (hl)
 swap a
 ld   %1, a
 and  a, #0x0f
 ld   %2, a
 ld   a, %1
 and  a, #0xf0
 ld   %1, a
} if canAssign(%2 'a'), canAssign(%1 'a'), canAssign('a' %1), notUsed('af')

replace {
 ld	  %1, (hl)
 ld	  %2, #0x00
 sla  %1
 rl   %2
 sla  %1
 rl   %2
 sla  %1
 rl   %2
 sla  %1
 rl   %2
} by {
 ; 16bitarithmetic peephole 1a improved <<4 with backup
 push af
 ld   a, (hl)
 swap a
 ld   %1, a
 and  a, #0x0f
 ld   %2, a
 ld   a, %1
 and  a, #0xf0
 ld   %1, a
 pop  af
} if canAssign(%2 'a'), canAssign(%1 'a'), canAssign('a' %1), notUsed('f')

replace{
 ld	l, a
 ld	h, #0x00
 add	hl, %1%2
 ld	%2, l
 ld	%1, h
} by {
 ; 16bitarithmetic peephole 2 improved 8bit and 16bit addition
 add	a, %2
 ld	%2, a
 adc	a, %1
 sub	a, %2
 ld	%1, a
} if notUsed('a'), notUsed('hl'), notUsed('zf')

replace{
 ld	%1, (hl)
 ld	hl, #%3
 add	hl, %1%2
 ld	%2, l
 ld	%1, h
} by {
 ; 16bitarithmetic peephole 3 improved 8bit and 16bit addition
 ld	a, %2
 add	a, #%4
 ld	%2, a
 adc	a, (hl)
 sub	a, %2
 ld	%1, a
} if operandsLiteral(%3), immdInRange(0x00 0xff '|' %3 0 %x4), notUsed('a'), notUsed('hl'), notUsed('zf')

// increases size, but is faster
// 5b 9c vs 7b 7c
replace{
 ld	b, %1
 inc	bc
 inc	bc
 inc	bc
 inc	bc
} by {
 ; 16bitarithmetic peephole 4 improved speed of 16bit +4
 ld	a, c
 add	a, #0x04
 ld	c, a
 adc	a, %1
 sub	c
 ld	b, a
} if notUsed('af'), notSame(%1 'a' 'c')

// increases size, but is faster
// 5b 10c vs 6b 7c
replace{
 inc	bc
 inc	bc
 inc	bc
 inc	bc
 inc	bc
} by {
 ; 16bitarithmetic peephole 5 improved bc+=5
 ld hl, #0x0005
 add hl, bc
 ld b, h
 ld c, l
} if notUsed('hl'), notUsed('nf' 'hf' 'cf')

// Improves SHOW_BKG etc
replace {
 ld	hl, #%1
 ld	a, (hl)
 res	%2, a
 ld	hl, #%1
 ld	(hl), a
} by {
 ; ram peephole 1 res (hl) directly
 ld	hl, #%1
 res	%2, (hl)
 ld	a, (hl)
}

// Improves HIDE_BKG etc
replace {
 ld	hl, #%1
 ld	a, (hl)
 set	%2, a
 ld	hl, #%1
 ld	(hl), a
} by {
 ; ram peephole 2 set (hl) directly
 ld	hl, #%1
 set	%2, (hl)
 ld	a, (hl)
}

replace {
 ld	%2, l
 ld	%1, h
 ld	a, (%1%2)
 inc	a
 ld	(%1%2), a
} by {
 ; ram peephole 3 inc (hl) directly
 inc	(hl)
 ld	a, (hl)
 ld	%2, l
 ld	%1, h
}

replace {
 add	sp, #2
} by {
 ; ram peephole 4 used pop af instead of lda sp
 pop af
} if notUsed('af')

replace {
 add	sp, #2
} by {
 ; ram peephole 5 used pop %1 instead of lda sp
 pop %1
} if notUsed('f'), unusedReg(%1 'bc' 'de' 'hl')

replace {
 ld	l, #0x%2
 ld	a, (hl)
 ld	hl, #0xff%2
} by {
 ; load peephole 1 loads constant value of l just once
 ld	l, #0x%2
 ld	a, (hl)
 ld	h, #0xff
}

replace{
 xor	a, a
 ld	(%1), a
 ld	a, #%2
} by {
 ; load peephole 2 increments instead of using a constant
 xor	a, a
 ld	(%1), a
 inc	a
} if operandsLiteral(%2), immdInRange(1 1 '|' %2 0 %3)

// for TMA_REG, TIMA_REG etc
replace {
 ld	%6, #%2
 ld	(%5%6), #%1
 ld	%6, #%3
} by {
 ; load peephole 3 increments instead of using a constant
 ld	%6, #%2
 ld	(%5%6), #%1
 inc	%6
} if operandsLiteral(%2 %3), immdInRange(1 1 '-' %3 %2 %4)

replace {
 ld	%6, #%2
 ld	(%5%6), #%1
 ld	%6, #%3
} by {
 ; load peephole 4 decrements instead of using a constant
 ld	%6, #%2
 ld	(%5%6), #%1
 dec	%6
} if operandsLiteral(%2 %3), immdInRange(1 1 '-' %2 %3 %4)

//x++ == 0
replace {
 ld	%1, (hl)
 inc	(hl)
 ld	a, %1
} by {
 ; load peephole 5 loaded directly into a instead of going through %1
 ld	a, (hl)
 inc	(hl)
} if notUsed(%1)

replace{
 ld	%1, #0x00
 xor	a, a
} by {
 ; load peephole 6 shares 0
 xor	a, a
 ld	%1, a
}

replace {
 ld	%2, #0x%4
 ld	%1, #0x%3
} by {
 ; load peephole 7 combined 8 bit loads into 16 bit load
 ld	%5, #0x%3%4
} if canJoinRegs(%1 %2 %5)

// rules which make use of ldd/ldi

replace {
 ld	(hl), #%1
 inc	hl
} by {
 ; lddi peephole 1 loaded constant into (hl) through a
 ld	a, #%1
 ld	(hl+), a
} if notUsed('a')

replace {
 ld	(hl), #%1
 dec	hl
} by {
 ; lddi peephole 2 loaded constant into (hl) through a
 ld	a, #%1
 ld	(hl-), a
} if notUsed('a')

replace {
 ldhl	sp,	#%2
 ld	a, (hl)
 ld	(%1),a
 ldhl	sp,	#%3
} by {
 ; lddi peephole 3 increment hl instead of lda
 ldhl	sp,	#%2
 ld	a, (hl+)
 ld	(%1),a
} if operandsLiteral(%2 %3), notSame(%1 'hl'), immdInRange(1 1 '-' %3 %2 %4)

// Improves jump tables
replace {
 cp	a, #%3
 jr	Z, %1
 sub	a, #%4
 jr	Z, %2
} by {
 sub	a, #%3
 jr	Z, %1
 ; jump peephole 1 simplified cp %3 sub %4 to sub %3 dec
 dec	a
 jr	Z, %2
} if operandsLiteral(%3 %4), immdInRange(1 1 '-' %4 %3 %5), notUsedFrom(%1 'a')

// rules with constants have priority (16 bit load is faster)

replace {
 ld	%2, #%1
 push	%2%3
 inc	sp
 ld	%5, #%4
 push	%5%6
 inc	sp
} by {
 ; pusharg peephole 1 pushed %2%3 instead of pushing %2%3 and %5%6
 ld	%3, #%4
 ld	%2, #%1
 push	%2%3
} if notSame('f' %3), notUsed(%3), notUsed(%5)

replace {
 ld	%2, #%1
 push	%2%3
 inc	sp
 ld	%5, #%4
 push	%5%6
 inc	sp
} by {
 ; pusharg peephole 2 pushed %5%6 instead of pushing %2%3 and %5%6
 ld	%6, #%4
 ld	%5, #%1
 push	%5%6
} if notSame('f' %6), notUsed(%6), notUsed(%2), notUsed(%5)

replace {
 ld	%2, #%1
 push	%2%3
 inc	sp
 ld	%5, #%4
 push	%5%6
 inc	sp
} by {
 ; pusharg peephole 3 pushed bc instead of pushing %2%3 and %5%6
 ld	c, #%4
 ld	b, #%1
 push	bc
} if notUsed('bc'), notUsed(%2), notUsed(%5)

replace {
 ld	%2, #%1
 push	%2%3
 inc	sp
 xor	a, a
 push	af
 inc	sp
} by {
 ; pusharg peephole 4 pushed %2%3 instead of pushing %2%3 and af
 ld	%3, #0x00
 ld	%2, #%1
 push	%2%3
} if notSame('f' %3), notUsed(%3), notUsed('af')

replace {
 xor	a, a
 push	af
 inc	sp
 ld	%2, #%1
 push	%2%3
 inc	sp
} by {
 ; pusharg peephole 5 pushed %2%3 instead of pushing %2%3 and af
 ld	%3, #%1
 ld	%2, #0x00
 push	%2%3
} if notSame('f' %3), notUsed(%3), notUsed(%2), notUsed('af')

// other rules

replace {
 ld	%2, %1
 push	%2%3
 inc	sp
 push	af
 inc	sp
} by {
 ; pusharg peephole 6 pushed %2%3 instead of pushing %2%3 and af
 ld	%2, %1
 ld %3, a
 push	%2%3
} if notSame('f' %3), notUsed(%3)

replace {
 ld	%3, %1
 push	%3%4
 inc	sp
 ldhl	sp,	#%2
 ld	%5, (hl)
 push	%5%6
 inc	sp
} by {
 ; pusharg peephole 7 pushed bc instead of pushing %3%4 and %5%6
 ld	%3, %1
 ld	b, %3
 ldhl	sp,	#%7
 ld	c, (hl)
 push	bc
} if operandsLiteral(%2), notUsed('bc'), immdInRange(-128 127 '-' %2 1 %7)


replace {
 ld	%1, %5
 push	%1%2
 inc	sp
 ld	%3, %6
 push	%3%4
 inc	sp
} by {
 ; pusharg peephole 8 pushed bc instead of pushing %1%2 and %3%4
 ld	%1, %5
 ld	b, %1
 ld	%3, %6
 ld	c, %3
 push	bc
} if notUsed('bc'), notSame('b' %6 %3)

replace {
 ld	%1, (hl)
 push	%1%2
 inc	sp
 dec	hl
 ld	%3, (hl)
 push 	%3%4
 inc	sp
} by {
 ; pusharg peephole 9 pushed two (hl) values through bc
 ld	b, (hl)
 dec	hl
 ld	c, (hl)
 push 	bc
} if notUsed('bc'), notUsed(%1), notUsed(%3)


replace {
 ld	%1, (hl)
 push	%1%2
 inc	sp
 inc	hl
 ld	%3, (hl)
 push 	%3%4
 inc	sp
} by {
 ; pusharg peephole 10 pushed two (hl) values through bc
 ld	b, (hl)
 inc	hl
 ld	c, (hl)
 push 	bc
} if notUsed('bc'), notUsed(%1), notUsed(%3)

replace {
 ld	%1, %5
 push	%1%2
 inc	sp
 xor	a, a
 push 	af
 inc	sp
} by {
 ; pusharg peephole 11 pushed %5 and `xor a` through bc
 ld	%1, %5
 ld	b, %1
 ld	c, #0x00
 push	bc
} if notUsed('bc'), notUsed('af')

replace {
 xor	a, a
 push 	af
 inc	sp
 ld	%1, %5
 push	%1%2
 inc	sp
} by {
 ; pusharg peephole 12 pushed `xor a` and %5 through bc
 ld	%1, %5
 ld	c, %1
 ld	b, #0x00
 push	bc
} if notUsed('bc'), notUsed('af'), notSame('a' %5)

// push 0 faster

replace {
 xor	a, a
 push 	af
 inc	sp
 xor	a, a
 push 	af
 inc	sp
} by {
 ; pusharg peephole 13 pushed double `xor a` fast
 xor	a, a
 rra
 push	af
 xor	a, a
}

// this broke SDCC regression tests

//// replace all variants of #0
//replace {
// ld	%1, #%2
// push	%1
//} by {
// ; pusharg peephole 14 pushed #0x0000 faster
// xor	a, a
// rra
// push	af
//} if operandsLiteral(%2), immdInRange(0 0 '+' %2 0 %3), notUsed(%1), notUsed('af')

replace {
 push	%1
 inc	sp
 push	%2
 inc	sp
} by {
 ; pusharg peephole 15 pushed %5 through %1
 ld	%4, %5
 push	%1
} if canSplitReg(%1 %3 %4), canSplitReg(%2 %5 %6), notUsed(%4), canAssign(%4 %5)

replace {
 push 	af
 inc	sp
 xor	a, a
 push 	af
 inc	sp
} by {
 ; pusharg peephole 16 pushed a and `xor a` fast
 rra
 rla
 scf
 ccf
 push	af
} if notUsed('af')

replace {
 xor	a, %1
} by {
 ; dead peephole 1 removed dead xor a
} if notUsed('af')

replace {
 inc	%1
} by {
 ; dead peephole 2 removed dead inc %1
} if notUsed(%1), notUsed('f'), notSame(%1 '(hl)')

replace {
 dec	%1
} by {
 ; dead peephole 3 removed dead dec %1
} if notUsed(%1), notUsed('f'), notSame(%1 '(hl)')

replace {
 sub	a, %1
} by {
 ; dead peephole 4 removed dead sub a, %1
} if notUsed('af')

replace {
 sbc	a, %1
} by {
 ; dead peephole 5 removed dead sbc a, %1
} if notUsed('af')

replace {
 cp	a, %1
} by {
 ; dead peephole 6 removed dead cp a, %1
} if  notUsed('f')

replace {
 and	a, %1
} by {
 ; dead peephole 7 removed dead and a, %1
} if notUsed('af')

replace {
 or	a, %1
} by {
 ; dead peephole 8 removed dead and a, %1
} if notUsed('af')

replace {
 add	a, %1
} by {
 ; dead peephole 9 removed dead add a, %1
} if notUsed('af')

replace {
 adc	a, %1
} by {
 ; dead peephole 10 removed dead adc a, %1
} if notUsed('af')
// Aim is to alter this file as little as neccessary
// peeph-z80.def - Z80 peephole rules
//
// Some of these peepholes could be potentially moved to peeph.def, but a
// GBZ80 expert should have a look at them before.
//
// (c) Philipp Klaus Krause (pkk@spth.de, philipp@colecovision.eu) 2006 - 2020
//
// This program is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation; either version 2, or (at your option) any
// later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

replace restart {
	ld	%1, %1
} by {
	; z80 peephole 0 removed redundant load from %1 into %1.
} if notVolatile(%1)

replace restart {
	ld	%1, %2
} by {
	; z80 peephole 1 removed dead load from %2 into %1.
} if notVolatile(%1), notUsed(%1), notVolatile(%2), notSame(%1 '(hl+)' '(hl-)'), notSame(%2 '(hl+)' '(hl-)')

// will never be true
replace restart {
	add	ix,sp
} by {
	; z80 peephole 2 removed dead frame pointer setup.
} if notUsed('ix')

replace restart {
	ld	%1, %2 + %3
} by {
	; z80 peephole 3 removed dead load from %2 + %3 into %1.
} if notVolatile(%1), notUsed(%1), notSame(%1 '(hl+)' '(hl-)')
// Should probably check for notVolatile(%2), too, but gives many false positives and no regression tests fail.

// will never match
replace restart {
	ld	%1, (iy)
} by {
	ld	%1, 0 (iy)
	; z80 peephole 4 made 0 offset explicit.
}

// will never match
replace restart {
	ld	(iy), %1
} by {
	ld	0 (iy), %1
	; z80 peephole 5 made 0 offset explicit.
}

replace restart {
	inc	hl
} by {
	; z80 peephole 5a removed dead increment of hl.
} if notUsed('hl')

replace restart {
	dec	hl
} by {
	; z80 peephole 6 removed dead decrement of hl.
} if notUsed('hl')

// will never match
replace restart {
	ld	%1, %2 (iy)
} by {
	; z80 peephole 7 removed dead load from %2 (iy) into %1.
} if notUsed(%1)
// Should probably check for notVolatile(), but gives many false positives and no regression tests fail.

// will never match
replace restart {
	ld	%1, %2 (ix)
} by {
	; z80 peephole 8 removed dead load from %2 (ix) into %1.
} if notUsed(%1)

replace restart {
	ld	%1, %2
	ld	%3, %1
} by {
	; z80 peephole 9 loaded %3 from %2 directly instead of going through %1.
	ld	%3, %2
} if canAssign(%3 %2), notVolatile(%1), notUsed(%1), notSame(%3 '(hl)' '(de)' '(bc)' '(hl+)' '(hl-)'), notSame(%1 '(hl+)' '(hl-)')

replace restart {
	ld	%1, %2
	ld	%3, %1
} by {
	; z80 peephole 9a loaded %3 from %2 directly instead of going through %1.
	ld	%3, %2
} if canAssign(%3 %2), notVolatile(%1), notUsed(%1), canAssign('a' %1), notSame(%1 '(hl+)' '(hl-)')

replace restart {
	ld	%1, hl
	ld	hl, %1
} by {
	; z80 peephole 9b reused value still in hl.
	ld	%1, hl
} if notVolatile(%1), notSame(%1 '(hl+)' '(hl-)')

replace restart {
	ld	%1, %2
	ld	%3, %4
	ld	%5, %1
} by {
	ld	%5, %2
	; z80 peephole 10 loaded %5 from %2 directly instead of going through %1.
	ld	%3, %4
} if canAssign(%5 %2), notVolatile(%1), operandsNotRelated(%1 %4), operandsNotRelated(%1 %3), operandsNotRelated(%3 %5), operandsNotRelated(%4 %5), notUsed(%1), notSame(%3 %4 '(hl)' '(de)' '(bc)' '(hl+)' '(hl-)'),
   notVolatile(%5), notSame(%1 '(hl+)' '(hl-)'), notSame(%5 '(hl+)' '(hl-)')
// Rule OK unless both %5 and %4 are volatile, but we can't express that directly.

// will never match
replace restart {
	ld	%3 (ix), %1
	ld	%4 (ix), %2
	ld	%5, %3 (ix)
	ld	%6, %4 (ix)
} by {
	ld	%3 (ix), %1
	ld	%4 (ix), %2
	; z80 peephole 11 loaded %5%6 from %1%2 directly instead of going through %3 (ix) %4 (ix).
	ld	%5, %1
	ld	%6, %2
} if canAssign(%5 %1), canAssign(%6 %2), notSame(%5 %2)

// gbz80 only has that syntax for lda
replace restart {
	ld	%1, %2 (%3)
	ld	%4, %1
} by {
	; z80 peephole 12 loaded %2 (%3) into %4 directly instead of going through %1.
	ld	%4, %2 (%3)
} if canAssign(%4 %2 %3), notVolatile(%1), notUsed(%1)

replace restart {
	ld	%1, %2
	ld	%3 (%4), %1
} by {
	; z80 peephole 13 loaded %2 into %3 (%4) directly instead of going through %1.
	ld	%3 (%4), %2
} if canAssign(%3 %4 %2), notVolatile(%1), notUsed(%1), canAssign('a' %1)
// canAssign ('a' %1) checks that %1 is an 8-bit value

replace restart {
	ld	%1, %2 (%3)
	ld	%4, %5 (%6)
	ld	%7, %1
} by {
	ld	%7, %2 (%3)
	; z80 peephole 14 loaded %2 (%3) into %7 directly instead of going through %1.
	ld	%4, %5 (%6)
} if canAssign(%7 %2 %3), notVolatile(%1), notUsed(%1), notSame(%1 %4), notSame(%7 %4)

replace restart {
	ld	%1, %2 (%3)
	ld	%4, %5
	ld	%7, %1
} by {
	ld	%7, %2 (%3)
	; z80 peephole 15 loaded %2 (%3) into %7 directly instead of going through %1.
	ld	%4, %5
} if canAssign(%7 %2 %3), notVolatile(%1), notUsed(%1), operandsNotRelated(%1 %5), operandsNotRelated(%7 %4), operandsNotRelated(%7 %5), notSame(%4 '(hl)' '(de)' '(bc)' '(hl+)' '(hl-)'), notSame(%5 '(hl)' '(de)' '(bc)' '(hl+)' '(hl-)' '(iy)')

replace restart {
	ld	%1,#%2
	ld	a,%3 (%1)
} by {
	; z80 peephole 16 loaded %2 into a directly instead of going through %1.
	ld	a,(#%2 + %3)
} if notUsed(%1)

replace restart {
	ld	hl, #%1
	ld	a, (hl)
} by {
	ld	a, (#%1)
	; z80 peephole 17 loaded a from (#%1) directly instead of using hl.
} if notUsed('hl')

replace restart {
	ld	hl,#%1 + %2
	ld	a,(hl)
} by {
	; z80 peephole 18 loaded %2 into a directly instead of using hl.
	ld	a, (#%1 + %2)
} if notUsed('hl')

replace restart {
	ld	hl,#%1
	ld	(hl),a
} by {
	ld	(#%1),a
	; z80 peephole 19 loaded (#%1) from a directly instead of using hl.
} if notUsed('hl')

replace restart {
	ld	hl,#%1 + %2
	ld	(hl),a
} by {
	ld	(#%1 + %2),a
	; z80 peephole 20 loaded (#%1) from a directly instead of using hl.
} if notUsed('hl')

replace restart {
	ld	a, %1 (%2)
	srl	a
	ld	%1 (%2), a
} by {
	srl	%1 (%2)
	ld	a, %1 (%2)
	; z80 peephole 21 shifted in (%2) instead of a.
}

replace restart {
	ld	%1,(hl)
	ld	a,%2 (%3)
	sub	a,%1
} by {
	ld	a,%2 (%3)
	; z80 peephole 22 used (hl) in sub directly instead of going through %1.
	sub	a,(hl)
} if notVolatile(%1), notUsed(%1)

replace restart {
	ld	l,c
	ld	h,b
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
} by {
	ld	a,(bc)
	ld	l,a
	inc	bc
	ld	a,(bc)
	ld	h,a
	; z80 peephole 22a optimize 16-bit load from BC.
} if notUsed('bc'), notUsed('a')

replace restart {
	inc	bc
	ld	l,c
	ld	h,b
} by {
	ld	l,c
	ld	h,b
	; z80 peephole 23 incremented in hl instead of bc.
	inc	hl
} if notUsed('bc')

replace restart {
	inc	de
	ld	l,e
	ld	h,d
} by {
	ld	l,e
	ld	h,d
	; z80 peephole 24 incremented in hl instead of de.
	inc	hl
} if notUsed('de')

replace restart {
	ld	c,l
	ld	b,h
	ld	a,#%1
	ld	(bc),a
} by {
	ld	c,l
	ld	b,h
	ld	(hl),#%1
	; z80 peephole 25 loaded #%1 into (hl) instead of (bc).
} if notUsed('a')

replace restart {
	ex	de, hl
	push	de
} by {
	; z80 peephole 26 pushed hl directly instead of going through de.
	push	hl
} if notUsed('de'), notUsed('hl')

replace restart {
	ld	l,%1
	ld	h,d
	push	hl
} by {
	; z80 peephole 27 pushed de instead of hl removing a load.
	ld	e,%1
	push	de
} if notUsed('hl'), notUsed('e')

replace restart {
	ex	de, hl
	push	bc
	push	de
} by {
	; z80 peephole 28 pushed hl directly instead of going through de.
	push	bc
	push	hl
} if notUsed('de'), notUsed('hl')

replace restart {
	ld	l,c
	ld	h,b
	push	hl
} by {
	; z80 peephole 29 pushed bc directly instead of going through hl.
	push	bc
} if notUsed('hl')

replace restart {
	ld	c,l
	ld	b,h
	push	%1
	push	bc
} by {
	; z80 peephole 30 pushed hl directly instead of going through bc.
	push	%1
	push	hl
} if notUsed('bc'), notSame(%1 'bc')

replace restart {
	pop	de
	ld	l, e
	ld	h, d
} by {
	; z80 peephole 31 popped hl directly instead of going through de.
	pop	hl
} if notUsed('de')

replace restart {
	pop	bc
	ld	l, c
	ld	h, b
} by {
	; z80 peephole 32 popped hl directly instead of going through bc.
	pop	hl
} if notUsed('bc')

// won't match
replace restart {
	ld	%1 (ix), %2
	ld	%3, %1 (ix)
} by {
	; z80 peephole 33 loaded %3 from %2 instead of going through %1 (ix).
	ld	%1 (ix), %2
	ld	%3, %2
} if canAssign(%3 %2)
// Don't need to check for volatile, since ix is used for the stack.

replace restart {
	ld	%1 (ix), a
	push	de
	ld	%2, %1 (ix)
} by {
	ld	%1 (ix), a
	push	de
	; z80 peephole 34 loaded %2 from a instead of %1 (ix)
	ld	%2, a
} if canAssign(%2 'a')

// those are handy for gbz80
replace restart {
	push	af
	inc	sp
	ld	a,e
	push	af
	inc	sp
} by {
	; z80 peephole 35 pushed de instead of pushing a twice.
	ld	d,a
	push	de
} if notUsed('d'), notUsed('a')

replace restart {
	push	af
	inc	sp
	ld	a,#%1
	push	af
	inc	sp
} by {
	; z80 peephole 36 pushed de instead of pushing a twice.
	ld	d,a
	ld	e,#%1
	push	de
} if notUsed('de')

replace restart {
	push	af
	inc	sp
	ld	a,#%1
	push	af
	inc	sp
} by {
	; z80 peephole 37 pushed bc instead of pushing a twice.
	ld	b,a
	ld	c,#%1
	push	bc
} if notUsed('bc')

replace restart {
	push	hl
	inc	sp
	push	de
	inc	sp
} by {
	ld	l, d
	; z80 peephole 38 combined pushing of h and d.
	push	hl
} if notUsed('l')

replace restart {
	push	bc
	inc	sp
	push	de
	inc	sp
} by {
	ld	c, d
	; z80 peephole 39 combined pushing of b and d.
	push	bc
} if notUsed('c')

replace restart {
	push	de
	inc	sp
	push	bc
	inc	sp
} by {
	ld	e, b
	; z80 peephole 41 combined pushing of d and b.
	push	de
} if notUsed('e')

replace restart {
	push	af
	inc	sp
	ld	a, c
	push	af
	inc	sp
} by {
	ld	b, a
	; z80 peephole 42 combined pushing of a and c.
	push	bc
} if notUsed('b'), notUsed('a')

replace restart {
	push	de
	inc	sp
	ld	a, c
	push	af
	inc	sp
} by {
	ld	e, c
	; z80 peephole 43 combined pushing of d and c.
	push	de
} if notUsed('e'), notUsed('a')

replace restart {
	ld	a, e
	push	af
	inc	sp
	ld	a, %2 (ix)
	push	af
	inc	sp
} by {
	ld	d, e
	ld	e, %2 (ix)
	; z80 peephole 44 combined pushing of e and %2 (ix).
	push	de
} if notUsed('d'), notUsed('e'), notUsed('a')

replace restart {
	ld	a,#%1
	ld	d,a
} by {
	; z80 peephole 45 loaded #%1 into d directly instead of going through a.
	ld	d,#%1
} if notUsed('a')

replace restart {
	ld	%1,a
	ld	%2,%1
} by {
	; z80 peephole 46 loaded %2 from a directly instead of going through %1.
	ld	%2,a
} if notUsed(%1)

replace restart {
	ld	a, %1 (%3)
	push	af
	inc	sp
	ld	a, %2 (%3)
	push	af
	inc	sp
} by {
	; z80 peephole 47 pushed %1 (%3), %2 (%3) through hl instead of af.
	ld	h, %1 (%3)
	ld	l, %2 (%3)
	push	hl
} if notUsed('a'), notUsed('hl')

replace restart {
	ld	c, l
	ld	b, h
	push	bc
} by {
	; z80 peephole 48 pushed hl instead of bc.
	push	hl
} if notUsed('bc')

replace restart {
	ld	a, (hl)
	inc	hl
	ld	h, (hl)
	ld	l, a
	push	hl
} by {
	; z80 peephole 49 pushed bc instead of hl.
	ld	c, (hl)
	inc	hl
	ld	b, (hl)
	push	bc
} if notUsed('bc'), notUsed('hl')

replace restart {
	pop	%1
	push	%1
} by {
	; z80 peephole 50 eleminated dead pop/push pair.
} if notUsed(%1)

replace restart {
	pop	%1
	ld	%2 (ix), %3
	push	%1
} by {
	; z80 peephole 51 eleminated dead pop/push pair.
	ld	%2 (ix), %3
} if notUsed(%1), operandsNotRelated(%1 %3)

replace restart {
	push	hl
	pop	bc
} by {
	ld	c, l
	ld	b, h
	; z80 peephole 52 replaced push/pop pair by loads.
} if notUsed('hl')

replace restart {
	push	hl
	pop	de
} by {
	ld	e, l
	ld	d, h
	; z80 peephole 53 replaced push/pop pair by loads.
} if notUsed('hl')

replace restart {
	ld	iy,#%1
	or	a,%2 (iy)
} by {
	; z80 peephole 54 used hl instead of iy.
	ld	hl,#%1 + %2
	or	a,(hl)
} if notUsed('iy'), notUsed('hl')

replace restart {
	ld	iy,#%1
	ld	%2,%3 (iy)
} by {
	; z80 peephole 55 used hl instead of iy.
	ld	hl,#%1 + %3
	ld	%2, (hl)
} if notUsed('iy'), notUsed('hl')

replace restart {
	ld	iy,#%1
	ld	h,%3 (iy)
} by {
	; z80 peephole 56 used hl instead of iy.
	ld	hl,#%1 + %3
	ld	h, (hl)
} if notUsed('iy'), notUsed('l')

replace restart {
	ld	iy,#%1
	ld	%2 (iy), %3
} by {
	; z80 peephole 57 used hl instead of iy.
	ld	hl,#%1 + %2
	ld	(hl), %3
} if notUsed('iy'), notUsed('hl'), notSame(%3 'h' 'l')

replace restart {
	ld	iy,#%1
	ld	%2,0 (iy)
	ld	%3,1 (iy)
} by {
	; z80 peephole 58 used hl instead of iy.
	ld	hl,#%1
	ld	%2, (hl)
	inc	hl
	ld	%3, (hl)
} if notUsed('iy'), notUsed('hl'), operandsNotRelated(%2 'hl')

replace restart {
	ld	iy,#%1
	ld	%2 (iy),%3
	ld	l,%2 (iy)
} by {
	; z80 peephole 59 used hl instead of iy.
	ld	hl,#%1 + %2
	ld	(hl),%3
	ld	l,(hl)
} if notUsed('iy'), notUsed('h')

replace restart {
	ld	iy,#%1
	ld	%2 (%3), %4
} by {
	; z80 peephole 60 used hl instead of iy.
	ld	hl,#%1 + %2
	ld	(hl), %4
} if notUsed('iy'), notUsed('hl'), operandsNotRelated(%4 'hl')

replace restart {
	ld	iy,#%1
	bit	%2,%3 (iy)
} by {
	; z80 peephole 61 used hl instead of iy.
	ld	hl,#%1+%3
	bit	%2, (hl)
} if notUsed('iy'), notUsed('hl')

replace restart {
	ld	iy, #%1
	add	iy, sp
	ld	%2, %3 (iy)
} by {
	; z80 peephole 62 used hl instead of iy.
	ld	hl, #%1+%3
	add	hl, sp
	ld	%2, (hl)
} if notUsed('iy'), notUsed('hl')

replace restart {
	ld	iy, #%1
	add	iy, sp
	ld	%2, 0 (iy)
	ld	%3, 1 (iy)
} by {
	; z80 peephole 63 used hl instead of iy.
	ld	hl, #%1
	add	hl, sp
	ld	%2, (hl)
	inc	hl
	ld	%3, (hl)
} if notUsed('iy'), notUsed('hl')

replace restart {
	ld	iy, #%1
	add	iy, sp
	ld	l, 0 (iy)
	ld	h, 1 (iy)
} by {
	; z80 peephole 64 used hl instead of iy.
	ld	hl, #%1
	add	hl, sp
	ld	a, (hl)
	inc	hl
	ld	h, (hl)
	ld	l, a
} if notUsed('iy'), notUsed('a')

replace restart {
	ld	iy, #%1
	add	iy, sp
	ld	0 (iy), #%2
	ld	1 (iy), #%3
} by {
	; z80 peephole 65 used hl instead of iy.
	ld	hl, #%1
	add	hl, sp
	ld	(hl), #%2
	inc	hl
	ld	(hl), #%3
} if notUsed('iy'), notUsed('hl')

replace restart {
	ld	iy, #%1
	add	iy, sp
	ld	a, 1 (iy)
	or	a, 0 (iy)
} by {
	ld	hl, #%1+1
	add	hl, sp
	ld	a, (hl)
	dec	hl
	or	a, (hl)
	; z80 peephole 66 used hl instead of iy.
} if notUsed('iy'), notUsed('hl')

replace restart {
	ld	iy, #%1
	add	iy, sp
	bit	%2, %3 (iy)
} by {
	ld	hl, #%1+%3
	add	hl, sp
	bit	%2, (hl)
	; z80 peephole 67 used hl instead of iy.
} if notUsed('iy'), notUsed('hl')

replace restart {
	ld	iy, #%1
	add	iy, sp
	or	a, %2 (iy)
} by {
	ld	hl, #%1+%2
	add	hl, sp
	or	a, (hl)
	; z80 peephole 68 used hl instead of iy.
} if notUsed('iy'), notUsed('hl')

replace restart {
	ld	c,l
	ld	b,h
	inc	bc
} by {
	; z80 peephole 69 incremented in hl instead of bc.
	inc	hl
	ld	c,l
	ld	b,h
} if notUsed('hl')

replace restart {
	ld	iy, #%1
	inc	%2 (iy)
} by {
	; z80 peephole 70 incremented in (hl) instead of %2 (iy).
	ld	hl, #%1+%2
	inc	(hl)
} if notUsed('hl'), notUsed('iy')

replace restart {
	ld	iy, #%1
	dec	%2 (iy)
} by {
	; z80 peephole 71 decremented in (hl) instead of %2 (iy).
	ld	hl, #%1+%2
	dec	(hl)
} if notUsed('hl'), notUsed('iy')

replace restart {
	ld	a,%1 (%2)
	bit	%3,a
} by {
	; z80 peephole 72 tested bit %3 of %1 (%2) directly instead of going through a.
	bit	%3,%1 (%2)
} if notUsed('a')

replace restart {
	ld	%1, (hl)
	bit	%2, %1
} by {
	; z80 peephole 73 tested bit %2 of (hl) directly instead of going through %1.
	bit	%2, (hl)
} if notUsed(%1)

replace restart {
	ld	a,%1
	bit	%2,a
} by {
	; z80 peephole 74 tested bit %2 of %1 directly instead of going through a.
	bit	%2,%1
} if notUsed('a'), canAssign(%1 'b')

replace restart {
	ld	a, %1
	set	%2, a
	ld	%1, a
} by {
	; z80 peephole 75 set bit %2 of %1 directly instead of going through a.
	set	%2, %1
	ld	a, %1
} if canAssign(%1 'b'), notSame(%1 '(hl+)' '(hl-)')
// canAssign(%1 'b') is true, iff set b, %1 is possible.

replace restart {
	ld	a, %1 (%2)
	set	%3, a
	ld	%1 (%2), a
} by {
	; z80 peephole 76 set bit %3 of %1 (%2) directly instead of going through a.
	set	%3, %1 (%2)
	ld	a, %1 (%2)
}

replace restart {
	ld	a, %1
	res	%2, a
	ld	%1, a
} by {
	; z80 peephole 77 reset bit %2 of %1 directly instead of going through a.
	res	%2, %1
	ld	a, %1
} if canAssign(%1 'b'), notSame(%1 '(hl+)' '(hl-)')
// canAssign(%1 'b') is true, iff set b, %1 is possible.

replace restart {
	ld	a, %1 (%2)
	res	%3, a
	ld	%1 (%2), a
} by {
	; z80 peephole 78 reset bit %3 of %1 (%2) directly instead of going through a.
	res	%3, %1 (%2)
	ld	a, %1 (%2)
}

replace restart {
	jp	NC,%1
	jp	%2
%1:
} by {
	jp	C,%2
	; z80 peephole 79 removed jp by using inverse jump logic
%1:
} if labelRefCountChange(%1 -1)

replace restart {
	jp	C,%1
	jp	%2
%1:
} by {
	jp	NC,%2
	; z80 peephole 80 removed jp by using inverse jump logic
%1:
} if labelRefCountChange(%1 -1)

replace restart {
	jp	NZ,%1
	jp	%2
%1:
} by {
	jp	Z,%2
	; z80 peephole 81 removed jp by using inverse jump logic
%1:
} if labelRefCountChange(%1 -1)

replace restart {
	jp	Z,%1
	jp	%2
%1:
} by {
	jp	NZ,%2
	; z80 peephole 82 removed jp by using inverse jump logic
%1:
} if labelRefCountChange(%1 -1)

replace restart {
	jp	%5
} by {
	jp	%6
	; z80 peephole 83 jumped to %6 directly instead of via %5.
} if labelIsUncondJump(), notSame(%5 %6), labelRefCountChange(%5 -1), labelRefCountChange(%6 +1)

replace restart {
	jp	%1,%5
} by {
	jp	%1,%6
	; z80 peephole 84 jumped to %6 directly instead of via %5.
} if labelIsUncondJump(), notSame(%5 %6), labelRefCountChange(%5 -1), labelRefCountChange(%6 +1)

replace restart {
	jp	%1
%2:
%1:
} by {
   ; z80 peephole 85 eliminated jump.
%2:
%1:
} if labelRefCountChange(%1 -1)

// A peephole that makes the code longer. Let's hope it's worth it in speed gain and further optimization potential.
replace restart {
	ld	a,#0x00
%1:
	bit	%2,a
	jp	Z,%3
} by {
	ld	a,#0x00
	jp	%3
	; z80 peephole 86 jumped directly to %3 instead of testing a first.
%1:
	bit	%2,a
	jp	Z,%3
} if labelRefCountChange(%3 +1)

replace restart {
	ld	%1, %2
	jp	%3
	jp	%4
} by {
	ld	%1, %2
	jp	%3
	; z80 peephole 87 removed unreachable jump to %3.
}

replace restart {
	ld	%1, %2
	jp	%3
%3:
} by {
	ld	%1, %2
%3:
	; z80 peephole 88 removed redundant jump to %3.
} if labelRefCountChange(%3 -1)

replace restart {
	ld	%1, #0x01
	bit	0, %1
	jp	Z, %2
} by {
	ld	%1, #0x01
	; z80 peephole 89 removed impossible jump to %2.
} if labelRefCountChange(%2 -1)

replace restart {
	rlca
	and	a, #0x01
	jp	Z, %1
} by {
	rlca
	; z80 peephole 90 removed and by changing jump condition.
	jp	NC, %1
} if notUsed('a'), notUsedFrom(%1 'a')

replace restart {
	rlca
	and	a, #0x01
	jp	NZ, %1
} by {
	rlca
	; z80 peephole 91 removed and by changing jump condition.
	jp	C, %1
} if notUsed('a'), notUsedFrom(%1 'a')

replace {
	ld	e, #0x%1
	ld	d, #0x%2
} by {
	ld	de, #0x%2%1
	; z80 peephole 92 combined constant loads into register pair.
}

replace {
	ld	d, #0x%1
	ld	e, #0x%2
} by {
	ld	de, #0x%1%2
	; z80 peephole 93 combined constant loads into register pair.
}

replace {
	ld	l, #0x%1
	ld	h, #0x%2
} by {
	ld	hl, #0x%2%1
	; z80 peephole 94 combined constant loads into register pair.
}

replace {
	ld	h, #0x%1
	ld	l, #0x%2
} by {
	ld	hl, #0x%1%2
	; z80 peephole 95 combined constant loads into register pair.
}

replace {
	ld	c, #0x%1
	ld	b, #0x%2
} by {
	ld	bc, #0x%2%1
	; z80 peephole 96 combined constant loads into register pair.
}

replace {
	ld	b, #0x%1
	ld	c, #0x%2
} by {
	ld	bc, #0x%1%2
	; z80 peephole 97 combined constant loads into register pair.
}

replace restart {
	ld	%1, a
	ld	a, %1
} by {
	ld	%1, a
	; z80 peephole 98 removed redundant load from %1 into a.
} if notVolatile(%1), notSame(%1 '(hl+)' '(hl-)')
// This gives many false negatives and without the test no problems are encountered in the regression tests
// Maybe we can try this after 2.7.0 release

replace restart {
	ld	%2 (ix), %1
	ld	%1, %2 (ix)
} by {
	ld	%2 (ix), %1
	; z80 peephole 98a removed redundant load of %1 from %2 (ix)
}

replace restart {
	ld	%1,a
	ld	a,%2
	or	a,%1
} by {
	ld	%1,a
	or	a,%2
	; z80 peephole 99 removed load by reordering or arguments.
} if notVolatile(%1), canAssign('b' %2), notSame(%1 '(hl+)' '(hl-)')
// canAssign('b' %2) is true, iff or a,%2 is possible.

replace restart {
	ld	%1, (hl)
	inc	hl
	ld	a, (hl)
	or	a, %1
} by {
	ld	a, (hl)
	inc	hl
	; z80 peephole 99a removed load by reordering or arguments.
	or	a, (hl)
} if notUsed(%1)

replace restart {
	and	a,%1
	or	a,a
} by {
	and	a,%1
	; z80 peephole 100 removed redundant or after and.
}

replace restart {
	xor	a,%1
	or	a,a
} by {
	xor	a,%1
	; z80 peephole 101 removed redundant or after xor.
}

replace restart {
	xor	a,%1 (%2)
	or	a,a
} by {
	xor	a,%1 (%2)
	; z80 peephole 102 removed redundant or after xor.
}

replace restart {
	dec	a
	or	a, a
} by {
	dec	a
	; z80 peephole 102a removed redundant or after dec.
}

replace restart {
	dec	%1
	ld	a, %1
	or	a, a
} by {
	dec	%1
	ld	a, %1
	; z80 peephole 102b removed redundant or after dec.
}

replace {
	ld	%1,%2
	ld	a,%2
} by {
	ld	a,%2
	ld	%1,a
	; z80 peephole 103 loaded value in a first and used it next
} if notVolatile(%1 %2), canAssign(%1 'a'), operandsNotRelated(%1 %2), notSame(%1 '(hl+)' '(hl-)'), notSame(%2 '(hl+)' '(hl-)')

replace restart {
	ld	%1,%2
	ld	%3,%4
	ld	%2,%1
	ld	%4,%3
} by {
	ld	%1,%2
	ld	%3,%4
	; z80 peephole 104 removed redundant load from %3%1 into %4%2
} if notVolatile(%1 %2 %3 %4), notSame(%1 '(hl+)' '(hl-)'), notSame(%2 '(hl+)' '(hl-)'), notSame(%3 '(hl+)' '(hl-)'), notSame(%4 '(hl+)' '(hl-)')

replace restart {
	push	de
	inc	sp
	ld	a,e
	push	af
	inc	sp
} by {
	push	de
	; z80 peephole 105 pushed de
} if notUsed('a')

replace restart {
	ld	iy,%1
	add	iy,sp
	ld	sp,iy
} by {
	ld	hl,%1
	add	hl,sp
	ld	sp,hl
	; z80 peephole 106 fixed stack using hl instead of iy.
} if notUsed('hl'), notUsed('iy')

replace restart {
	ld	a,%1
	sub	a,%2
	jp	%3,%4
	ld	a,%1
} by {
	ld	a,%1
	cp	a,%2
	jp	%3,%4
	; z80 peephole 107 removed load from %1 into a by replacing sub with cp
	assert	a=%1
} if notVolatile(%1), notUsedFrom(%4 'a'), notSame(%1 '(hl+)' '(hl-)')

replace restart {
	assert	a=%1
	sub	a,%2
	jp	%3,%4
	ld	a,%1
} by {
	cp	a,%2
	jp	%3,%4
	; z80 peephole 108 removed load from %1 into a by replacing sub with cp
	assert	a=%1
} if notUsedFrom(%4 'a')

replace restart {
	assert	a=%1
} by {
}

replace restart {
	rlca
	ld	a,#0x00
	rla
} by {
	rlca
	and	a,#0x01
	; z80 peephole 109 replaced zero load, rla by and since rlca writes the same value to carry bit and least significant bit.
}

replace restart {
	ld	%1,%2
	push	%1
	pop	%4
	ld	%1,%3
} by {
	ld	%4,%2
	; z80 peephole 110 moved %2 directly into de instead of going through %1.
	ld	%1,%3
}

replace restart {
	add	a,#0x00
	ld	%2,a
	ld	a,%3
	adc	a,%4
} by {
	; z80 peephole 111 removed lower part of multibyte addition.
	ld	%2,a
	ld	a,%3
	add	a,%4
}

replace restart {
	ld	a, l
	add	a, #0x%1
	ld	e, a
	ld	a, h
	adc	a, #0x%2
	ld	d, a
} by {
	ld	de, #0x%2%1
	add	hl, de
	; z80 peephole 112 used 16-bit addition.
	ld	e, l
	ld	d, h
	ld	a, h
} if notUsed('hl')

replace restart {
	ld	a, l
	add	a, #0x%1
	ld	c, a
	ld	a, h
	adc	a, #0x%2
	ld	b, a
} by {
	ld	bc, #0x%2%1
	add	hl,bc
	; z80 peephole 113 used 16-bit addition.
	ld	c, l
	ld	b, h
	ld	a, h
} if notUsed('hl')

replace restart {
	ld	l,%1 (ix)
	ld	h,%2 (ix)
	ld	a,(hl)
	inc	a
	ld	l,%1 (ix)
	ld	h,%2 (ix)
	ld	(hl),a
} by {
	ld	l,%1 (ix)
	ld	h,%2 (ix)
	inc	(hl)
	; z80 peephole 114 incremented in (hl) instead of going through a.
} if notUsed('a')

replace restart {
	ld	a,(hl)
	inc	a
	ld	(hl),a
} by {
	inc	(hl)
	; z80 peephole 115 incremented in (hl) instead of going through a.
} if notUsed('a')

// TODO: Check for volatile?
replace restart {
	ld	%1, %2 (%3)
	inc	%1
	ld	%2 (%3), %1
} by {
	inc	%2 (%3)
	ld	%1, %2 (%3)
	; z80 peephole 116 incremented in %2 (%3) instead of going through %1.
} if canAssign('a' %1)

// TODO: Check for volatile?
replace restart {
	ld	%1, %2 (%3)
	dec	%1
	ld	%2 (%3), %1
} by {
	dec	%2 (%3)
	ld	%1, %2 (%3)
	; z80 peephole 117 decremented in %2 (%3) instead of going through %1.
} if canAssign('a' %1)

replace restart {
	ld	%1,a
	ld	a,%2
	add	a,%1
} by {
	ld	%1, a
	; z80 peephole 118 removed load by exploiting commutativity of addition.
	add	a,%2
} if notSame(%2 '(bc)' '(de)'), canAssign('b' %2)
// canAssign('b' %2) is true, iff add a,%2 is possible.

replace restart {
	ld	c,l
	ld	b,h
	ld	hl,#%1
	add	hl,bc
} by {
	; z80 peephole 119 removed loads by exploiting commutativity of addition.
	ld	bc,#%1
	add	hl,bc
} if notUsed('bc')

replace restart {
	ld	hl,#%1
	add	hl,%2
	ld	bc,#%4
	add	hl,bc
} by {
	; z80 peephole 120 removed loads by exploiting commutativity of addition.
	ld	hl,#%1 + %4
	add	hl,%2
} if notUsed('bc')

replace restart {
	or	a,%1
	jp	NZ,%2
	ld	%3,#0x00
} by {
	or	a,%1
	jp	NZ,%2
	ld	%3,a
	; z80 peephole 121 replaced constant #0x00 by a (which has just been tested to be #0x00).
}

replace restart {
	and	a,%1
	jp	NZ,%2
	ld	%3,#0x00
} by {
	and	a,%1
	jp	NZ,%2
	ld	%3,a
	; z80 peephole 122 replaced constant #0x00 by a (which has just been tested to be #0x00).
}

replace restart {
	sub	a,%1
	jp	NZ,%2
	ld	%3,#0x00
} by {
	sub	a,%1
	jp	NZ,%2
	ld	%3,a
	; z80 peephole 123 replaced constant #0x00 by a (which has just been tested to be #0x00).
}

replace restart {
	inc	a
	jp	NZ,%1
	ld	%2,#0x00
} by {
	inc	a
	jp	NZ,%1
	ld	%2,a
	; z80 peephole 124 replaced constant #0x00 by a (which has just been tested to be #0x00).
}

replace restart {
	dec	a
	jp	NZ,%1
	ld	%2,#0x00
} by {
	dec	a
	jp	NZ,%1
	ld	%2,a
	; z80 peephole 125 replaced constant #0x00 by a (which has just been tested to be #0x00).
}

replace restart {
	or	a,%1
	jp	NZ,%2
	ld	a,%3
	or	a,a
} by {
	or	a,%1
	jp	NZ,%2
	or	a,%3
	; z80 peephole 126 shortened or using a (which has just been tested to be #0x00).
} if canAssign('b' %3)
// canAssign('b' %2) is true, iff or a,%2 is possible.

replace restart {
	sub	a,%1
	jp	NZ,%2
	ld	a,%3
	or	a,a
} by {
	sub	a,%1
	jp	NZ,%2
	or	a,%3
	; z80 peephole 127 shortened or using a (which has just been tested to be #0x00).
} if canAssign('b' %3)
// canAssign('b' %2) is true, iff or a,%2 is possible.

replace restart {
	ld	hl,#%1
	add	hl,%2
	inc	hl
} by {
	ld	hl,#%1+1
	add	hl,%2
	; z80 peephole 129 moved increment of hl to constant.
}

replace restart {
	push	hl
	pop	iy
	pop	hl
	inc	iy
} by {
	inc	hl
	push	hl
	pop	iy
	pop	hl
	; z80 peephole 130 incremented in hl instead of iy.
}

replace restart {
	push	bc
	pop	iy
	inc	iy
} by {
	inc	bc
	push	bc
	pop	iy
	; z80 peephole 131 incremented in bc instead of iy.
} if notUsed('bc')

replace restart {
	ld	hl,%1
	add	hl,%2
	push	hl
	pop	iy
} by {
	ld	iy,%1
	add	iy,%2
	; z80 peephole 132 added in iy instead of hl.
} if notUsed('hl'), notSame(%2 'hl')

replace restart {
	pop	af
	ld	sp,%1
} by {
	; z80 peephole 133 removed redundant pop af.
	ld	sp,%1
} if notUsed('a')

replace restart {
	inc	sp
	ld	sp,%1
} by {
	; z80 peephole 134 removed redundant inc sp.
	ld	sp,%1
}

replace restart {
	call    %1
	ret
} by {
	jp  %1
	; z80 peephole 135 replaced call at end of function by jump (tail call optimization).
} if symmParmStack(%1)

// Callee saves ix.
replace restart {
	call	%1
	pop	ix
	ret
} by {
	pop	ix
	jp	%1
	; z80 peephole 136 replaced call at end of function by jump moving call beyond pop ix (tail call optimization).
} if symmParmStack(%1)

replace restart {
	ld	%1,#%2
	ld	%3,%4
	ld	%1,#%2
} by {
	ld	%1,#%2
	ld	%3,%4
	; z80 peephole 137 removed load of #%2 into %1 since it's still there.
} if notVolatile(%1), operandsNotRelated(%3 %1), notSame(%1 '(hl+)' '(hl-)')

replace restart {
	ld	hl,#%1
	ld	de,#%1
} by {
	; z80 peephole 138 used #%1 from hl for load into de.
	ld	hl,#%1
	ld	e,l
	ld	d,h
}

replace restart {
	ld	sp,hl
	ld	hl,#0x0002
	add	hl,sp
} by {
	ld	sp, hl
	inc	hl
	inc	hl
	; z80 peephole 139 replaced addition by increment.
}

replace restart {
	ex	de, hl
	ld	hl, #%1
	add	hl, de
} by {
	; z80 peephole 140 removed ex exploiting commutativity of addition.
	ld	de, #%1
	add	hl, de
} if notUsed('de')

replace restart {
	ld	hl, #%1
	add	hl, %2
	ex	de, hl
	inc	de
} by {
	ld	hl, #%1+1
	; z80 peephole 141 moved increment to constant.
	add	hl, %2
	ex	de, hl
} if notUsed('hl')

replace restart {
	pop	af
	push	hl
} by {
	; z80 peephole 142 used ex to move hl onto the stack.
	ex	(sp),hl
} if isPort('z80' 'ez80_z80'), notUsed('a'), notUsed('hl')

replace restart {
	pop	af
	ld	hl, #%1
	push	hl
} by {
	ld	hl, #%1
	; z80 peephole 143 used ex to move hl onto the stack.
	ex	(sp),hl
} if isPort('z80' 'ez80_z80'), notUsed('a'), notUsed('hl')

replace restart {
	pop	af
	inc	sp
	ld	hl,#%1
	push	hl
} by {
	inc	sp
	ld	hl,#%1
	; z80 peephole 144 used ex to move #%1 onto the stack.
	ex	(sp),hl
} if isPort('z80' 'ez80_z80'), notUsed('a'), notUsed('hl')

replace restart {
	pop	af
	inc	sp
	ld	h, %1 (ix)
	ld	l, %2 (ix)
	push	hl
} by {
	inc	sp
	ld	h, %1 (ix)
	ld	l, %2 (ix)
	; z80 peephole 145 used ex to move %1 (ix) %2 (ix) onto the stack.
	ex	(sp),hl
} if notUsed('a'), notUsed('hl')

replace restart {
	pop	af
	ld	a,#%1
	push	af
	inc	sp
} by {
	ld	h,#%1
	ex	(sp),hl
	; z80 peephole 146 used ex to move #%1 onto the stack.
	inc	sp
} if isPort('z80' 'ez80_z80'), notUsed('a'), notUsed('hl')

replace restart {
	ld	%1,#%2
	ld	%3 (%1),a
%4:
	ld	%1,%5
} by {
	ld	(#%2 + %3),a
	; z80 peephole 147 directly used #%2 instead of going through %1 using indirect addressing.
%4:
	ld	%1,%5
}

replace restart {
	pop	af
	ld	%1,#%2
	ld	%3 (%1),%4
	ld	%1,#%5
} by {
	ld	a,%4
	ld	(#%2 + %3),a
	; z80 peephole 148 used #%2 directly instead of going through %1 using indirect addressing.
	pop	af
	ld	%1,#%5
} if notSame(%3 'a')

replace restart {
	ld	%1,a
	bit	%2,%1
} by {
	bit	%2,a
	; z80 peephole 149 tested bit %2 of a directly instead of going through %1.
} if notUsed(%1)

replace restart {
	sbc	a,%1
	bit	7,a
	jp	NZ,%2
} by {
	sbc	a,%1
	jp	 M,%2
	; z80 peephole 150 used sign flag instead of testing bit 7.
} if isPort('z80' 'ez80_z80')

replace restart {
	ld	%1,a
	or	a,a
	jp	%3,%4
	ld	a,%1
} by {
	ld	%1,a
	or	a,a
	jp	%3,%4
	; z80 peephole 151 used value still in a instead of reloading from %1.
}

replace {
	jp	%5
	ret
} by {
	jp	%5
	; z80 peephole 152 removed unused ret.
}

replace {
	jp	%5
	ld	sp,ix
	pop	ix
	ret
} by {
	jp	%5
	; z80 peephole 153 removed unused ret.
}

replace restart {
	or	a,%1
	jp	NZ,%2
	xor	a,a
	jp	%3
} by {
	or	a,%1
	jp	NZ,%2
	; z80 peephole 155 removed redundant zeroing of a (which has just been tested to be #0x00).
	jp	%3
}

replace restart {
	dec	hl
	inc	hl
} by {
	; z80 peephole 155a removed inc hl / dec hl pair.
}

replace restart {
	dec	hl
	inc	bc
	inc	hl
} by {
	inc	bc
	; z80 peephole 155b removed inc hl / dec hl pair.
}

replace restart {
	dec	hl
	inc	de
	inc	hl
} by {
	inc	de
	; z80 peephole 155v removed inc hl / dec hl pair.
}

replace restart {
	jp	Z, %2
	ld	a, #%3
	jp	%1
%2:
	ld	a, #%4
%1:
} by {
	ld	a, #%3
	jp	NZ, %1
%2:
	ld	a, #%4
	; z80 peephole 168z used double assignment in case of Z condition.
%1:
} if labelRefCountChange(%2 -1)

replace restart {
	jp	NZ, %2
	ld	a, #%3
	jp	%1
%2:
	ld	a, #%4
%1:
} by {
	ld	a, #%3
	jp	Z, %1
%2:
	ld	a, #%4
	; z80 peephole 168nz used double assignment in case of NZ condition.
%1:
} if labelRefCountChange(%2 -1)

replace restart {
	jp	Z, %2
	ld	a, #%3
	jp	%1
%2:
	xor	a, a
%1:
} by {
	ld	a, #%3
	jp	NZ, %1
	; z80 peephole 169xz used double assignment in case of Z condition.
%2:
	xor	a, a
%1:
} if labelRefCountChange(%2 -1)

replace restart {
	jp	NZ, %2
	ld	a, #%3
	jp	%1
%2:
	xor	a, a
%1:
} by {
	ld	a, #%3
	jp	Z, %1
	; z80 peephole 169xnz used double assignment in case of NZ condition.
%2:
	xor	a, a
%1:
} if labelRefCountChange(%2 -1)

replace restart {
	jp	Z, %2
	ld	c, #%3
	jp	%1
%2:
	ld	c, #%4
%1:
} by {
	ld	c, #%3
	jp	NZ, %1
%2:
	ld	c, #%4
	; z80 peephole 170z used double assignment in case of Z condition.
%1:
} if labelRefCountChange(%2 -1)

replace restart {
	jp	NZ, %2
	ld	c, #%3
	jp	%1
%2:
	ld	c, #%4
%1:
} by {
	ld	c, #%3
	jp	Z, %1
%2:
	ld	c, #%4
	; z80 peephole 170nz used double assignment in case of NZ condition.
%1:
} if labelRefCountChange(%2 -1)

replace restart {
	jp	Z, %2
	ld	e, #%3
	jp	%1
%2:
	ld	e, #%4
%1:
} by {
	ld	e, #%3
	jp	NZ, %1
%2:
	ld	e, #%4
	; z80 peephole 171z used double assignment in case of Z condition.
%1:
} if labelRefCountChange(%2 -1)

replace restart {
	jp	NZ, %2
	ld	e, #%3
	jp	%1
%2:
	ld	e, #%4
%1:
} by {
	ld	e, #%3
	jp	Z, %1
%2:
	ld	e, #%4
	; z80 peephole 171nz used double assignment in case of NZ condition.
%1:
} if labelRefCountChange(%2 -1)

replace restart {
	jp	Z, %2
	ld	l, #%3
	jp	%1
%2:
	ld	l, #%4
%1:
} by {
	ld	l, #%3
	jp	NZ, %1
%2:
	ld	l, #%4
	; z80 peephole 172z used double assignment in case of Z condition.
%1:
} if labelRefCountChange(%2 -1)

replace restart {
	jp	NZ, %2
	ld	l, #%3
	jp	%1
%2:
	ld	l, #%4
%1:
} by {
	ld	l, #%3
	jp	Z, %1
%2:
	ld	l, #%4
	; z80 peephole 172nz used double assignment in case of NZ condition.
%1:
} if labelRefCountChange(%2 -1)

replace restart {
	ld	%1, c
	ld	%2, b
	push	%2%1
} by {
	push	bc
	; z80 peephole 173 eliminated assignment by pushing bc
} if notUsed(%2), notUsed(%1)

replace restart {
	ld	%1, e
	ld	%2, d
	push	%2%1
} by {
	push	de
	; z80 peephole 174 eliminated assignment by pushing de
} if notUsed(%2), notUsed(%1)

replace restart {
	ld	%1, l
	ld	%2, h
	push	%2%1
} by {
	push	hl
	; z80 peephole 175 eliminated assignment by pushing hl
} if notUsed(%2), notUsed(%1)

replace restart {
	ld	%1,%2
	ld	%2,%1
} by {
	ld	%1,%2
	; z80 peephole 176 remove unnecessary load back
} if notVolatile(%1), notVolatile(%2), notSame(%1 '(hl+)' '(hl-)'), notSame(%2 '(hl+)' '(hl-)')

// These ex-generating rules should be among the last ones since ex counts as a read from both hl and de for notUsed().
barrier

replace restart {
	ld	e,l
	ld	d,h
} by {
	; z80 peephole 156 used ex to load hl into de.
	ex	de,hl
} if isPort('z80' 'ez80_z80'), notUsed('hl')

replace restart {
	ld	l,e
	ld	h,d
} by {
	; z80 peephole 157 used ex to load de into hl.
	ex	de,hl
} if isPort('z80' 'ez80_z80'), notUsed('de')

barrier

// Should be one of the last ones. Opens the code to further peephole optimization.
replace restart {
%1:
} by {
	; z80 peephole 158 removed unused label %1.
} if labelRefCount(%1 0)

// Ensure that all rules above see only jp, not jr.
barrier

replace {
	add	hl,de
	pop	de
	jp	(hl)
%1:
	jp	%5
	jp	%6
	jp	%7
%2:
} by {
	; z80 peephole 159-3 removed addition using short jumps in jump-table.
	pop	de
	jp	(hl)
%1:
	jr	%5
	jr	%6
	jr	%7
%2:
} if labelJTInRange

replace {
	add	hl,de
	jp	(hl)
%1:
	jp	%5
	jp	%6
	jp	%7
%2:
} by {
	; z80 peephole 159-3' removed addition using short jumps in jump-table.
	jp	(hl)
%1:
	jr	%5
	jr	%6
	jr	%7
%2:
} if labelJTInRange

replace {
	add	hl,de
	pop	de
	jp	(hl)
%1:
	jp	%5
	jp	%6
	jp	%7
	jp	%8
%2:
} by {
	; z80 peephole 159-4 removed addition using short jumps in jump-table.
	pop	de
	jp	(hl)
%1:
	jr	%5
	jr	%6
	jr	%7
	jr	%8
%2:
} if labelJTInRange

replace {
	add	hl,de
	jp	(hl)
%1:
	jp	%5
	jp	%6
	jp	%7
	jp	%8
%2:
} by {
	; z80 peephole 159-4' removed addition using short jumps in jump-table.
	jp	(hl)
%1:
	jr	%5
	jr	%6
	jr	%7
	jr	%8
%2:
} if labelJTInRange

replace {
	add	hl,de
	pop	de
	jp	(hl)
%1:
	jp	%5
	jp	%6
	jp	%7
	jp	%8
	jp	%9
%2:
} by {
	; z80 peephole 159-5 removed addition using short jumps in jump-table.
	pop	de
	jp	(hl)
%1:
	jr	%5
	jr	%6
	jr	%7
	jr	%8
	jr	%9
%2:
} if labelJTInRange

replace {
	add	hl,de
	jp	(hl)
%1:
	jp	%5
	jp	%6
	jp	%7
	jp	%8
	jp	%9
%2:
} by {
	; z80 peephole 159-5' removed addition using short jumps in jump-table.
	jp	(hl)
%1:
	jr	%5
	jr	%6
	jr	%7
	jr	%8
	jr	%9
%2:
} if labelJTInRange

replace {
	add	hl,de
	pop	de
	jp	(hl)
%1:
	jp	%5
	jp	%6
	jp	%7
	jp	%8
	jp	%9
	jp	%10
%2:
} by {
	; z80 peephole 159-6 removed addition using short jumps in jump-table.
	pop	de
	jp	(hl)
%1:
	jr	%5
	jr	%6
	jr	%7
	jr	%8
	jr	%9
	jr	%10
%2:
} if labelJTInRange

replace {
	add	hl,de
	jp	(hl)
%1:
	jp	%5
	jp	%6
	jp	%7
	jp	%8
	jp	%9
	jp	%10
%2:
} by {
	; z80 peephole 159-6' removed addition using short jumps in jump-table.
	jp	(hl)
%1:
	jr	%5
	jr	%6
	jr	%7
	jr	%8
	jr	%9
	jr	%10
%2:
} if labelJTInRange

replace {
	add	hl,de
	pop	de
	jp	(hl)
%1:
	jp	%5
	jp	%6
	jp	%7
	jp	%8
	jp	%9
	jp	%10
	jp	%11
%2:
} by {
	; z80 peephole 159-7 removed addition using short jumps in jump-table.
	pop	de
	jp	(hl)
%1:
	jr	%5
	jr	%6
	jr	%7
	jr	%8
	jr	%9
	jr	%10
	jr	%11
%2:
} if labelJTInRange

replace {
	add	hl,de
	jp	(hl)
%1:
	jp	%5
	jp	%6
	jp	%7
	jp	%8
	jp	%9
	jp	%10
	jp	%11
%2:
} by {
	; z80 peephole 159-7' removed addition using short jumps in jump-table.
	jp	(hl)
%1:
	jr	%5
	jr	%6
	jr	%7
	jr	%8
	jr	%9
	jr	%10
	jr	%11
%2:
} if labelJTInRange

barrier

// Do all jump optimizations before replacing by ret.

replace restart {
	jp	%5
} by {
	ret
	; z80 peephole 160 replaced jump by return.
} if labelIsReturnOnly(%5), labelRefCountChange(%5 -1)

replace restart {
	jp	%1,%5
} by {
	ret	%1
	; z80 peephole 161 replaced jump by return.
} if labelIsReturnOnly(%5), labelRefCountChange(%5 -1)

// Replace jp by ret before replacing jp by jr outside of jump tables, since using ret can reduce the number of references to jump labels.
barrier

replace restart {
	jp	%5
} by {
	jr	%5
	; z80 peephole 162 changed absolute to relative unconditional jump.
} if labelInRange(%5)

replace restart {
	jp	Z,%5
} by {
	jr	Z,%5
	; z80 peephole 163 changed absolute to relative conditional jump.
} if labelInRange(%5)

replace restart {
	jp	NZ,%5
} by {
	jr	NZ,%5
	; z80 peephole 164 changed absolute to relative conditional jump.
} if labelInRange(%5)

replace restart {
	jp	C,%5
} by {
	jr	C,%5
	; z80 peephole 165 changed absolute to relative conditional jump.
} if labelInRange(%5)

replace restart {
	jp	NC,%5
} by {
	jr	NC,%5
	; z80 peephole 166 changed absolute to relative conditional jump.
} if labelInRange(%5)

replace {
	dec	b
	jr	NZ,	%5
} by {
	djnz	%5
	; z80 peephole 167 used djnz
} if isPort('z80' 'ez80_z80')

barrier
